# This workflow copies a single database from source to target.
# It is designed to be called from another workflow using workflow_call.
name: DB Copy

on:
  workflow_call:
    inputs:
      source_key:
        required: true
        type: string
      target_key:
        required: true
        type: string

jobs:
  copy-db:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq and PostgreSQL client
        run: |
          # Install jq for JSON parsing and PostgreSQL client tools
          sudo apt-get update
          sudo apt-get install -y jq postgresql-client

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI
        run: |
          # Install Azure CLI for database operations
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Set DB Info from dbs.json
        id: setdbinfo
        run: |
          SOURCE_KEY="${{ inputs.source_key }}"
          TARGET_KEY="${{ inputs.target_key }}"
          DB_JSON=$(cat .github/config/dbs.json)

          # Get source DB info
          SOURCE_INFO=$(echo "$DB_JSON" | jq -r ".[] | select(.key==\"$SOURCE_KEY\")")
          echo "SOURCE_RESOURCE_GROUP=$(echo $SOURCE_INFO | jq -r .resource_group)" >> $GITHUB_ENV
          echo "SOURCE_SERVER_NAME=$(echo $SOURCE_INFO | jq -r .server_name)" >> $GITHUB_ENV
          echo "SOURCE_HOST=$(echo $SOURCE_INFO | jq -r .host)" >> $GITHUB_ENV
          echo "SOURCE_USER=$(echo $SOURCE_INFO | jq -r .user)" >> $GITHUB_ENV
          echo "SOURCE_DB_NAME=$(echo $SOURCE_INFO | jq -r .db_name)" >> $GITHUB_ENV
          echo "SOURCE_PASSWORD_SECRET=$(echo $SOURCE_INFO | jq -r .password_secret)" >> $GITHUB_ENV

          # Get target DB info
          TARGET_INFO=$(echo "$DB_JSON" | jq -r ".[] | select(.key==\"$TARGET_KEY\")")
          echo "TARGET_RESOURCE_GROUP=$(echo $TARGET_INFO | jq -r .resource_group)" >> $GITHUB_ENV
          echo "TARGET_SERVER_NAME=$(echo $TARGET_INFO | jq -r .server_name)" >> $GITHUB_ENV
          echo "TARGET_HOST=$(echo $TARGET_INFO | jq -r .host)" >> $GITHUB_ENV
          echo "TARGET_USER=$(echo $TARGET_INFO | jq -r .user)" >> $GITHUB_ENV
          echo "TARGET_DB_NAME=$(echo $TARGET_INFO | jq -r .db_name)" >> $GITHUB_ENV
          echo "TARGET_PASSWORD_SECRET=$(echo $TARGET_INFO | jq -r .password_secret)" >> $GITHUB_ENV

      - name: Delete and Recreate Target DB
        run: |
          # Delete and recreate target database
          az postgres flexible-server db delete \
            --resource-group "$TARGET_RESOURCE_GROUP" \
            --server-name "$TARGET_SERVER_NAME" \
            --database-name "$TARGET_DB_NAME" \
            --yes
          az postgres flexible-server db create \
            --resource-group "$TARGET_RESOURCE_GROUP" \
            --server-name "$TARGET_SERVER_NAME" \
            --database-name "$TARGET_DB_NAME"

      - name: Wait for Target DB to be ready
        run: |
          # Wait for target database to be fully provisioned
          sleep 30

      - name: Dump Source DB
        env:
          PGPASSWORD: ${{ secrets[env.SOURCE_PASSWORD_SECRET] }}
        run: |
          # Dump source database to backup.dump using specified arguments
          pg_dump -Fc -Z 9 -x -v "$SOURCE_DB_NAME" -h "$SOURCE_HOST" -p 5432 -U "$SOURCE_USER" -f backup.dump

      - name: Restore Target DB
        env:
          PGPASSWORD: ${{ secrets[env.TARGET_PASSWORD_SECRET] }}
        run: |
          # Restore backup.dump to target database using specified arguments
          pg_restore -Fc -c -v -d "$TARGET_DB_NAME" backup.dump -h "$TARGET_HOST" -p 5432 -U "$TARGET_USER" --if-exists

      - name: Remove dump file
        run: |
          # Remove backup.dump after restore
          rm -f backup.dump