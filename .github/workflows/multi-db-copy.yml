jobs:
  copy-db:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set DB Info
        id: setdbinfo
        run: |
          SOURCE_KEY="${{ github.event.inputs.source_key }}"
          TARGET_KEY="${{ github.event.inputs.target_key }}"
          DB_JSON=$(cat dbs.json)

          SOURCE_INFO=$(echo "$DB_JSON" | jq -r ".[] | select(.key==\"$SOURCE_KEY\")")
          TARGET_INFO=$(echo "$DB_JSON" | jq -r ".[] | select(.key==\"$TARGET_KEY\")")

          echo "SOURCE_RESOURCE_GROUP=$(echo $SOURCE_INFO | jq -r .resource_group)" >> $GITHUB_ENV
          echo "SOURCE_SERVER_NAME=$(echo $SOURCE_INFO | jq -r .server_name)" >> $GITHUB_ENV
          echo "SOURCE_HOST=$(echo $SOURCE_INFO | jq -r .host)" >> $GITHUB_ENV
          echo "SOURCE_USER=$(echo $SOURCE_INFO | jq -r .user)" >> $GITHUB_ENV
          echo "SOURCE_DB_NAME=$(echo $SOURCE_INFO | jq -r .db_name)" >> $GITHUB_ENV
          echo "SOURCE_PASSWORD_SECRET=$(echo $SOURCE_INFO | jq -r .password_secret)" >> $GITHUB_ENV

          echo "TARGET_RESOURCE_GROUP=$(echo $TARGET_INFO | jq -r .resource_group)" >> $GITHUB_ENV
          echo "TARGET_SERVER_NAME=$(echo $TARGET_INFO | jq -r .server_name)" >> $GITHUB_ENV
          echo "TARGET_HOST=$(echo $TARGET_INFO | jq -r .host)" >> $GITHUB_ENV
          echo "TARGET_USER=$(echo $TARGET_INFO | jq -r .user)" >> $GITHUB_ENV
          echo "TARGET_DB_NAME=$(echo $TARGET_INFO | jq -r .db_name)" >> $GITHUB_ENV
          echo "TARGET_PASSWORD_SECRET=$(echo $TARGET_INFO | jq -r .password_secret)" >> $GITHUB_ENV

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Delete and Recreate Target DB
        run: |
          az postgres flexible-server db delete \
            --resource-group "$TARGET_RESOURCE_GROUP" \
            --server-name "$TARGET_SERVER_NAME" \
            --database-name "$TARGET_DB_NAME" \
            --yes
          az postgres flexible-server db create \
            --resource-group "$TARGET_RESOURCE_GROUP" \
            --server-name "$TARGET_SERVER_NAME" \
            --database-name "$TARGET_DB_NAME"

      - name: Dump Source DB
        env:
          PGPASSWORD: ${{ secrets.SVR14_PASSWORD_SECRET }}
        run: |
          pg_dump --host="$SOURCE_HOST" --username="$SOURCE_USER" --dbname="$SOURCE_DB_NAME" > dump.sql

      - name: Restore Target DB
        env:
          PGPASSWORD: ${{ secrets.SVR14COPY_PASSWORD_SECRET }}
        run: |
          pg_restore --host="$TARGET_HOST" --username="$TARGET_USER" --dbname="$TARGET_DB_NAME" < dump.sql
